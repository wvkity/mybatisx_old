import java.text.SimpleDateFormat

plugins {
    id "com.github.hierynomus.license" version "0.15.0" apply true
    id 'org.springframework.boot' version '2.3.4.RELEASE'
}

ext {
    configuration = [
        JAVA_VERSION = JavaVersion.VERSION_1_8
    ]
    libraries = [
        junit = "5.4.2",
        jmockit = "1.49",
        lombok = "1.18.10",
        fastjson = "1.2.72",
        io = "2.8.0",
        HikariCP = "3.4.5",
        druid = "1.2.3",
        mybatis = "3.5.2",
        mybatisSpring = "2.0.2",
        jsqlparser = "3.2",
        cglib = "3.3.0",
        aspectjweaver = "1.9.6",
        slf4j = "1.7.30",
        log4j2 = "2.13.1",
        disruptor = "3.4.2",
        guava = "28.0-jre",
        caffeine = "2.8.4",
        servlet = "4.0.1",
        spring = "5.2.5.RELEASE",
        springBoot = "2.3.4.RELEASE",
        springGradle = "1.0.10.RELEASE",
    ]
    libs = [
        "junit-jupiter"                     : "org.junit.jupiter:junit-jupiter:${junit}",
        "jmockit"                           : "org.jmockit:jmockit:${jmockit}",
        "lombok"                            : "org.projectlombok:lombok:${lombok}",
        "inject"                            : "javax.inject:javax.inject:1",
        "hikariCP"                          : "com.zaxxer:HikariCP:${HikariCP}",
        "druid"                             : "com.alibaba:druid:${druid}",
        "druid-springboot"                  : "com.alibaba:druid-spring-boot-starter:${druid}",
        "io"                                : "commons-io:commons-io:${io}",
        "mybatis"                           : "org.mybatis:mybatis:${mybatis}",
        "mybatis-spring"                    : "org.mybatis:mybatis-spring:${mybatisSpring}",
        "mybatis-thymeleaf"                 : "org.mybatis.scripting:mybatis-thymeleaf:1.0.2",
        "mybatis-freemarker"                : "org.mybatis.scripting:mybatis-freemarker:1.2.2",
        "mybatis-velocity"                  : "org.mybatis.scripting:mybatis-velocity:2.1.0",
        "mybatis-spring-boot-starter"       : "org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3",
        "jsqlparser"                        : "com.github.jsqlparser:jsqlparser:${jsqlparser}",
        "cglib"                             : "cglib:cglib-nodep:${cglib}",
        "aspect"                            : "org.aspectj:aspectjweaver:${aspectjweaver}",
        "slf4j"                             : "org.slf4j:slf4j-api:${slf4j}",
        "slf4j-simple"                      : "org.slf4j:slf4j-simple:${slf4j}",
        "log4j2"                            : "org.apache.logging.log4j:log4j-api:${log4j2}",
        "disruptor"                         : "com.lmax:disruptor:${disruptor}",
        "guava"                             : "com.google.guava:guava:${guava}",
        "fastjson"                          : "com.alibaba:fastjson:${fastjson}",
        "caffeine"                          : "com.github.ben-manes.caffeine:caffeine:${caffeine}",
        "jpa"                               : "javax.persistence:javax.persistence-api:2.2",
        "servlet"                           : "javax.servlet:javax.servlet-api:${servlet}",
        "springboot-gradle"                 : "org.springframework.boot:spring-boot-gradle-plugin:${springBoot}",
        "spring-gradle-management"          : "io.spring.gradle:dependency-management-plugin:${springGradle}",
        "springboot-dependencies"           : "org.springframework.boot:spring-boot-dependencies:${springBoot}",
        "spring-jdbc"                       : "org.springframework:spring-jdbc:${spring}",
        "spring-context"                    : "org.springframework:spring-context:${spring}",
        "spring-beans"                      : "org.springframework:spring-beans:${spring}",
        "spring-tx"                         : "org.springframework:spring-tx:${spring}",
        "spring-aspects"                    : "org.springframework:spring-aspects:${spring}",
        "spring-web"                        : "org.springframework:spring-web:${spring}",
        "springboot"                        : "org.springframework.boot:spring-boot:${springBoot}",
        "springboot-jdbc"                   : "org.springframework.boot:spring-boot-starter-jdbc",
        "springboot-aop"                    : "org.springframework.boot:spring-boot-starter-aop",
        "springboot-autoconfigure"          : "org.springframework.boot:spring-boot-autoconfigure",
        "springboot-configuration-processor": "org.springframework.boot:spring-boot-configuration-processor",
        "springboot-autoconfigure-processor": "org.springframework.boot:spring-boot-autoconfigure-processor",
        "springboot-log4j2"                 : "org.springframework.boot:spring-boot-starter-log4j2",
        "springboot-thymeleaf"              : "org.springframework.boot:spring-boot-starter-thymeleaf",
        "springboot-web"                    : "org.springframework.boot:spring-boot-starter-web",
        "springboot-webflux"                : "org.springframework.boot:spring-boot-starter-webflux",
        "springboot-security"               : "org.springframework.boot:spring-boot-starter-security",
        "springboot-undertow"               : "org.springframework.boot:spring-boot-starter-undertow",
        "springboot-test"                   : "org.springframework.boot:spring-boot-starter-test",
    ]
}

allprojects {
    group 'com.github.mybatisx'
    version '1.0.0-SNAPSHOT'
    apply from: rootDir.canonicalPath + '/.gradle/publish.gradle'
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = "${JAVA_VERSION}"
    targetCompatibility = "${JAVA_VERSION}"

    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jcenter.bintray.com/' }
        mavenCentral()
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/resources'
                exclude '.gitkeep'
            }
        }
        test {
            java {
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/resources'
            }
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    jar {
        exclude '**/.gitkeep'
        afterEvaluate {
            manifest {
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Bundle-DocURL': ''
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': 'wvkity'
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
            }
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    javadoc {
        options.tags = ['created']
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }

    test {
        dependsOn("cleanTest", "generatePomFileForMavenJavaPublication")
        useJUnitPlatform()
    }

    task mkdir {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }

    dependencies {
        runtimeOnly "${libs.slf4j}"
        compileOnly "${libs.slf4j}"
        implementation fileTree(dir: "libs", include: ["*.jar"])
        testImplementation "${libs.slf4j}"
        testImplementation "${libs["slf4j-simple"]}"
        testImplementation "${libs["jmockit"]}"
        testAnnotationProcessor "${libs["jmockit"]}"
        testImplementation "${libs["junit-jupiter"]}"
        testAnnotationProcessor "${libs["junit-jupiter"]}"
    }

    publishing {
        repositories {
            mavenLocal()
            maven {
                def userName = ossUserName
                def passWord = ossPassword
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username userName
                    password passWord
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'mybatisx'
                    packaging 'jar'
                    description = 'Mybatis extension kit.'
                    url = 'https://github.com/wvkity/mybatisx'

                    scm {
                        connection = 'scm:git@github.com:https://github.com/wvkity/mybatisx.git'
                        developerConnection = 'scm:git@github.com:https://github.com/wvkity/mybatisx.git'
                        url = 'https://github.com/wvkity/mybatisx'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'wvkity'
                            name = 'wvkity'
                            email = 'wvkity@gmail.com'
                        }
                    }
                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }
}


